name: Node 22 CI/CD Pipeline # Name of the workflow

on:
  workflow_call:  # Trigger that allows other workflows to call this workflow

#on:
#  push: # Trigger the workflow on push events
#    branches:
#      - main  # Run the workflow only when there's a push to the 'main' branch

permissions:
  contents: write # Allows to write to the repository

jobs:
  build:
    runs-on: ubuntu-latest  # Specify the OS for the runner (ubuntu-latest)

    steps:
      # Step to check out the code from the repository
      - name: Checkout code the code from the repository
        uses: actions/checkout@v4

      # Step to Set up Node.js 22
      - name: Set up Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Step to Pull origin main
      - name: Pull origin main
        run: |
          git config --global user.email "${{ secrets.GIT_HUB_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_HUB_NAME }}"

          # Pull the latest changes from the remote main branch
          git pull origin main --rebase
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}  # Token for authentication

      # Step to remove -SNAPSHOT suffix
      - name: Remove -SNAPSHOT suffix
        run: |
          # Extract current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Remove -SNAPSHOT suffix if present
          NEW_VERSION=${CURRENT_VERSION%-SNAPSHOT*}

          # Update version in package.json without -SNAPSHOT
          jq --arg new_version "$NEW_VERSION" '.version=$new_version' package.json > tmp.json && mv tmp.json package.json

          # Export the new version as an environment variable for further use
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        env:
          NEW_VERSION: ${{ env.NEW_VERSION }}

      # Step to Commit, Tag and Push the new version of package.json
      - name: Commit, Tag and Push the new version of package.json
        run: |
          git config --global user.email "${{ secrets.GIT_HUB_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_HUB_NAME }}"
          
          # Check if there are changes to commit
          git diff --exit-code || (
            # Commit changes to package.json
            git add package.json
            git commit -m "Upgrade version to ${{ env.NEW_VERSION }}"
          
            # Push commit and tag to the repository
            git push origin HEAD:refs/heads/main
          )

          # Create a new tag
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release version ${{ env.NEW_VERSION }}"

          # Push commit and tag to the repository
          git push origin HEAD:refs/heads/main --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}  # Token for authentication
          NEW_VERSION: ${{ env.NEW_VERSION }}  # The new version calculated earlier

      # Step to Install dependencies
      - name: Install dependencies
        run: npm install

      # Step to build project
      - name:
        run: CI=false npm run build:prod

      # Step to perform code quality analysis with SonarQube
      - name: Perform code quality analysis with SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Authentication token for SonarQube
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # URL of the SonarQube server
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.branch.name=master
            -Dsonar.sources=src
            -Dsonar.exclusions=**/test/**/*

      # Step to wait for SonarQube Quality Gate results
      - name: Wait for SonarQube Quality Gate results
        uses: sonarsource/sonarqube-quality-gate-action@master
        continue-on-error: true # Continues the workflow even if the Quality Gate fails
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Step to extract version from package.json
      - name: Extract version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step to build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY_NAME }}:${{ env.VERSION }} .
        env:
          DOCKER_BUILDKIT: 1  # Optional for enhanced Docker build performance
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_REPOSITORY_NAME: ${{ secrets.DOCKER_HUB_REPOSITORY_NAME }}

      # Step to push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY_NAME }}:${{ env.VERSION }}
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY_NAME }}:${{ env.VERSION }} ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY_NAME }}:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY_NAME }}:latest
        env:
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_REPOSITORY_NAME: ${{ secrets.DOCKER_HUB_REPOSITORY_NAME }}