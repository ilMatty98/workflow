name: Quarkus CI/CD Pipeline - Temurin (Java 21, Maven) # Name of the workflow

on:
  push: # Trigger the workflow on push events
    branches:
      - main  # Run the workflow only when there's a push to the 'main' branch

permissions:
  contents: write # Allows to write to the repository

jobs:
  build:
    runs-on: ubuntu-latest  # Specify the OS for the runner (ubuntu-latest)

    steps:
      # Step to check out the code from the repository
      - name: Checkout code the code from the repository
        uses: actions/checkout@v4

      # Step to Set up Temurin 21 JDK
      - name: Set up Temurin 21
        uses: actions/setup-java@v3
        with:
          java-version: '21.0.5'
          distribution: 'temurin'

      # Step to Commit, Tag and Push the new version of pom.xml
      - name: Pull origin main
        run: |
          git config --global user.email "${{ secrets.GIT_HUB_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_HUB_NAME }}"

          # Pull the latest changes from the remote main branch
          git pull origin main --rebase
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}  # Token for authentication

      # Step to remove -SNAPSHOT suffix
      - name: Remove -SNAPSHOT suffix
        run: |
          # Extract current version from pom.xml
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)

          # Remove -SNAPSHOT suffix if present
          NEW_VERSION="${CURRENT_VERSION%-SNAPSHOT*}"

          # Update version in pom.xml without -SNAPSHOT
          mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false

          # Export the new version as an environment variable for further use
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        env:
          NEW_VERSION: ${{ env.new_version }}

      # Step to Commit, Tag and Push the new version of pom.xml
      - name: Commit, Tag and Push the new version of pom.xml
        run: |
          git config --global user.email "${{ secrets.GIT_HUB_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_HUB_NAME }}"
          
          # Check if there are changes to commit
          git diff --exit-code || (
            # Commit changes to pom.xml
            git add pom.xml
            git commit -m "Upgrade version to ${{ env.NEW_VERSION }}"
          
            # Push commit and tag to the repository
            git push origin HEAD:refs/heads/main
          )

          # Create a new tag
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release version ${{ env.NEW_VERSION }}"

          # Push commit and tag to the repository
          git push origin HEAD:refs/heads/main --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}  # Token for authentication
          NEW_VERSION: ${{ env.NEW_VERSION }}  # The new version calculated earlier

      # Step to Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository  # Path to the cache location (where Maven stores dependencies)
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}  # Unique cache key based on OS and pom.xml content
          restore-keys: |
            ${{ runner.os }}-maven-  # Fallback key based on OS only

      # Step to run tests with Maven and generate a coverage report with Jacoco
      - name: Run tests with Maven and generate a coverage report with Jacoco
        run: mvn clean verify jacoco:report

      # Step to perform code quality analysis with SonarQube
      - name: Perform code quality analysis with SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Authentication token for SonarQube
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # URL of the SonarQube server
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.branch.name=master
            -Dsonar.java.binaries=target/classes
            -Dsonar.sources=src
            -Dsonar.coverage.exclusions=**/test/**/*
            -Dsonar.exclusions=**/test/**/*

      # Step to wait for SonarQube Quality Gate results
      - name: Wait for SonarQube Quality Gate results
        uses: sonarsource/sonarqube-quality-gate-action@master
        continue-on-error: true # Continues the workflow even if the Quality Gate fails
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Step to extract version from pom.xml
      - name: Extract version from pom.xml
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step to build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY_NAME }}:${{ env.VERSION }} .
        env:
          DOCKER_BUILDKIT: 1  # Optional for enhanced Docker build performance
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_REPOSITORY_NAME: ${{ secrets.DOCKER_HUB_REPOSITORY_NAME }}

      # Step to push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY_NAME }}:${{ env.VERSION }}
        env:
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_REPOSITORY_NAME: ${{ secrets.DOCKER_HUB_REPOSITORY_NAME }}

      # Step to update deployment.yaml with new image version
      - name: Update deployment.yaml with new image version
        run: |
          # Replace the placeholder with the actual image tag
          sed -i 's|image: "\${IMAGE_TAG}"|image: "${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPOSITORY_NAME }}:${{ env.VERSION }}"|' k8s/deployment.yaml

      # Step to Authenticate with Google Cloud using Service Account Key
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      # Step to Set Up Google Cloud SDK
      - name: Set Up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GKE_PROJECT }}
          version: latest

      # Get the GKE credentials, so we can deploy to the cluster
      - name: Get the GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_ZONE }}

      # Deploy to GKE
      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout status deployment/${{ secrets.GKE_DEPLOYMENT_NAME }} -n=${{ secrets.GKE_NAMESPACE }}
          kubectl get services -o wide
